[*******************************************************************************
 * Copyright (c) 2013 EMF-REST.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Camilo Alvarez (cadorca@gmail.com)  - initial API and implementation
 ******************************************************************************]
[*******************************************************************************
 * Copyright (c) 2013 EMF-REST.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Camilo Alvarez (cadorca@gmail.com)  - initial API and implementation
 ******************************************************************************]
[%
 import "../lib/StringUtils.eol"; 
 import "../lib/EcoreUtils.eol"; 
%]

package webmapi.service;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import org.json.JSONWriter;

public final class [%=clazz.name()%]Serializer { 
    [% generateGenerationMethod(clazz.name, clazz.qualifiedName());%]
	public final static void generateJSONObject(JSONWriter jw, [%=clazz.qualifiedName()%] obj, HashMap<String, String> serialized, StringBuffer path, int depth) {
		jw.object();
		if(obj == null){
		  jw.endObject();
		  return;
		}
		[*for each attribute*]
		[%for (attr in clazz.eAllAttributes) { %]
	 		[%if (attr.upperBound<2) {%]
		  		jw.key("[%=attr.name()%]").value(obj.[%=attr.getMethod()%]());	
			[%} else{%]
				[*if attribute is array*]
				jw.array();
				for ([%=attr.eType.qualifiedName()%] value : obj.[%=attr.getMethod()%]()) {
					jw.value(value);
				}
				jw.endArray();
			[%} %]  						
	    [%}%] 
		serialized.put("[%=clazz.name%]"+IdentificationResolver.[%=clazz.idMethod()%](obj), "t");
		if (depth > 0) {
		[%for (ref in clazz.eAllReferences) { %]
		[*
			// for each reference
			// if array		
		*]
	    jw.key("[%=ref.name%]");
	    [%if (not ref.eType.isSuperClass()) {%]		
		[%if (ref.isMany()) {%]	
			jw.array();
			for ([%=ref.eType.qualifiedName()%] obji : obj.[%=ref.getMethod()%]()) {
				if (serialized.get("[%=ref.eType.name%]"+IdentificationResolver.[%=ref.eType.idMethod()%](obji)) == null) {
					[%=ref.eType.serializerName()%].generateJSONObject(jw, obji, serialized, path, depth - 1);
				}else{
					[*// put a reference???*]
				}
			}
			jw.endArray();
		[%} else{%]	
			// else
			if (serialized.get("[%=ref.eType.name%]"+IdentificationResolver.[%=ref.eType.idMethod()%](obj.[%=ref.getMethod()%]())) == null) {
		     	[%=ref.eType.serializerName()%].generateJSONObject(jw, obj.[%=ref.getMethod()%](), serialized, path, depth - 1);
			}else{
			    jw.value(IdentificationResolver.[%=ref.eType.idMethod()%](obj.[%=ref.getMethod()%]()));
			}
		 [%}%]
		 [%} else {%]
		[* generate an serialize a compound resource*]
		[%
 		 var inheritList = ref.eType.getAllConcreteClasses();
		%]
		[%for (cls in inheritList) { %]
			List<[%=cls.qualifiedName()%]> [%=ref.name%][%=cls.name()%] = new ArrayList<[%=cls.qualifiedName()%]>();
		[%}%]
		[%
		 var orderedInheritList = ref.eType.getAllConcreteClassesOrderedBySize();
		%]
		[% if(ref.isMany()) {%]
		for([%=ref.eType.qualifiedName()%] element: obj.[%=ref.getMethod()%]()){
		[% } else { %]
		if(obj.[%=ref.getMethod()%]() != null){
			[%=ref.eType.qualifiedName()%] element =obj.[%=ref.getMethod()%]();
		[% } %]
		[% var i = 0;%]
		[%for (cls in orderedInheritList) { %]
		    [%if(i>0){%] else [%}%]
		    if(element instanceof [%=cls.qualifiedName()%]){
		    	[%=ref.name%][%=cls.name()%].add(([%=cls.qualifiedName()%])element);
		    }
		    [% i= i+1;%]
		[%}%]
     	}		
		webmapi.service.container.[%=ref.eType.inheritanceContainerName()%] [%=ref.name%]Container= new webmapi.service.container.[%=ref.eType.inheritanceContainerName()%](
		[% var i = 0; %]
		[%for (cls in inheritList) { %]
			[%if(i>0){%] , [%}%][%=ref.name%][%=cls.name()%]  
			[% i = i+1; %] 
		[%}%]
		);
    	[%=ref.eType.containerSerializerName()%].generateJSONObject(jw, [%=ref.name%]Container, serialized, path, depth - 1);
		 [%}%]  
		 [%}%]
		}
		jw.endObject();
	}

}

[% function generateGenerationMethod( name : String , qualifiedName: String){%]
 public static String serialize[%=name%]List(java.util.List<[%=qualifiedName%]> obj, int depth, OutputStream out) throws RuntimeException {
        ByteArrayOutputStream bStream = new ByteArrayOutputStream();
        PrintWriter pw = new PrintWriter(out == null ? new ByteArrayOutputStream() : out);
        JSONWriter jw = new JSONWriter(pw);
        jw.array();
        for ([%=qualifiedName%] oi : obj) {
            generateJSONObject(jw, ([%=qualifiedName%])oi, new HashMap<String, String>(), new StringBuffer(), depth);
        }
        jw.endArray();
        if (out == null) {
            try {
                return bStream.toString("utf-8");
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
        }
        pw.flush();
        pw.close();
        return null;
    }


	public final static String serialize([%=qualifiedName%] obj, OutputStream out) throws RuntimeException {
		return serialize(obj, 0, out);
	}

	public final static String serialize([%=qualifiedName%] obj, int depth, OutputStream out) {
		ByteArrayOutputStream bStream = new ByteArrayOutputStream();
        PrintWriter pw = new PrintWriter(out == null ? bStream : out);
        JSONWriter jw = new JSONWriter(pw);
        generateJSONObject(jw, obj, new HashMap<String, String>(), new StringBuffer(), depth);
        if (out == null) {
            try {
                return bStream.toString("utf-8");
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
        } 
        pw.flush();
        pw.close();
        return null;
	}
[%}%]


