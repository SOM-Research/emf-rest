[*******************************************************************************
 * Copyright (c) 2013 EMF-REST.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Camilo Alvarez (cadorca@gmail.com)  - initial API and implementation
 ******************************************************************************]
[%
 import "restMethods.egl"; 
 import "../../lib/StringUtils.eol"; 
 import "../../lib/EcoreUtils.eol"; 
%]
[% var pckName = clazz.package(); %]
package [%=pckName%].service;

import java.util.List;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import org.eclipse.emf.ecore.util.EcoreUtil;
import javax.ws.rs.core.Response;
import webmapi.service.configuration.Wrapper;
import webmapi.util.ResourceSaver;
import org.jboss.resteasy.annotations.providers.jaxb.json.Mapped;
import org.jboss.resteasy.annotations.providers.jaxb.json.XmlNsMap;
import javax.annotation.security.RolesAllowed;
import javax.annotation.security.PermitAll;

import [%=pckName%].*;
import [%=pckName%].impl.*;

[%var roles = clazz.getRoleAnnotations();%]
[%var clsName = clazz.name;%]
[%var clsVarName = clazz.name.toLowerFirst();%]
[%var roles = clazz.getRoleAnnotations();%]
public class [%=clazz.rscClassName()%] {

	private [%=clsName%] instance;
	private String id;
	private ResourceSaver resourceSaver;

	public [%=clazz.rscClassName()%]([%=clsName%] instance, String id, ResourceSaver r) {
		this.instance = instance;
		this.id = id;
		resourceSaver = r;
	}

[%if (not roles.isEmpty()){%]
	@RolesAllowed({
[%for(role in roles){%]
"[%=role%]",
[%}%]
})
[%} else {%]
	@PermitAll
[%}%]
	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Mapped(namespaceMap = { @XmlNsMap(namespace = "http://emf-rest.com/proxy", jsonName = "proxy") })
	public [%=clsName%] get[%=clsName%]() {
		return instance;
	}

[%if (not roles.isEmpty()){%]
	@RolesAllowed({
[%for(role in roles){%]
"[%=role%]",[%}%]})
[%} else {%]
	@PermitAll
[%}%]
	@PUT
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Mapped(namespaceMap = { @XmlNsMap(namespace = "http://emf-rest.com/proxy", jsonName = "proxy") })
	public void update[%=clsName%]([%=clsName%]Impl [%=clsVarName%]) {
		resourceSaver.put(EcoreUtil.getIdentification(instance), [%=clsVarName%]);
	}

[%if (not roles.isEmpty()){%]
	@RolesAllowed({
[%for(role in roles){%]
"[%=role%]",[%}%]})
[%} else {%]
	@PermitAll
[%}%]
	@DELETE
	@Mapped(namespaceMap = { @XmlNsMap(namespace = "http://emf-rest.com/proxy", jsonName = "proxy") })
	public void delete[%=clsName%]() {
		resourceSaver.remove(EcoreUtil.getIdentification(instance));
	}

[% for(ref in clazz.eAllReferences){ %]
  [% ref.generateGenericResource(); %]
  [% ref.generateGET(); %]
  [% ref.generatePOST(); %]
  [% ref.generateDELETE(); %]
  [* Look for all the concrete classes of the abstract reference *]
[%}%]
}
[%
function EClass idParam() : String{
 return self.name+"Id";
}
%]